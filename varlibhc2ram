#!/usr/bin/env sh

. /etc/varlibhc2ram.conf

HDD_VARLIBHC=/var/lib/hdd.hc
RAM_VARLIBHC=/var/lib/hc

LOG_NAME="varlibhc2ram.log"
VARLIBHC2RAM_LOG="/var/log/${LOG_NAME}"
LOG_OUTPUT="tee -a $VARLIBHC2RAM_LOG"

isSafe () {
    [ -d $HDD_VARLIBHC/ ] || echo "ERROR: $HDD_VARLIBHC/ doesn't exist! Can't sync."
    [ -d $HDD_VARLIBHC/ ] || exit 1
}

syncToDisk () {
    isSafe

    if [ "$USE_RSYNC" = true ]; then
        rsync -aXWv --delete --links $RAM_VARLIBHC/ $HDD_VARLIBHC/ 2>&1 | $LOG_OUTPUT
    else
        cp -rfup $RAM_VARLIBHC/ -T $HDD_VARLIBHC/ 2>&1 | $LOG_OUTPUT
    fi
}

syncFromDisk () {
    isSafe

    if [ ! -z "$(du -sh -t "$SIZE" $HDD_VARLIBHC/ | cut -f1)" ]; then
        echo "ERROR: RAM disk too small. Can't sync."
        umount -l $RAM_VARLIBHC/
        umount -l $HDD_VARLIBHC/
        if [ "$MAIL" = true ]; then
            echo "varlibhc2ram : No place on RAM anymore, fallback on the disk" | mail -s 'Varlibhc2ram Error' root;
        fi
        exit 1
    fi

    if [ "$USE_RSYNC" = true ]; then
        rsync -aXWv --delete --links $HDD_VARLIBHC/ $RAM_VARLIBHC/ 2>&1 | $LOG_OUTPUT
    else
        cp -rfup $HDD_VARLIBHC/ -T $RAM_VARLIBHC/ 2>&1 | $LOG_OUTPUT
    fi
}

wait_for () {
    while ! grep -qs "$1" /proc/mounts; do
        sleep 0.1
    done
}

createZramLogDrive () {
	# Check Zram Class created
	if [ ! -d "/sys/class/zram-control" ]; then
		modprobe zram
		RAM_DEV='0'
	else
		RAM_DEV=$(cat /sys/class/zram-control/hot_add)
	fi
	echo ${COMP_ALG} > /sys/block/zram${RAM_DEV}/comp_algorithm
	echo ${LOG_DISK_SIZE} > /sys/block/zram${RAM_DEV}/disksize
	echo ${SIZE} > /sys/block/zram${RAM_DEV}/mem_limit
	mke2fs -t ext4 /dev/zram${RAM_DEV}
}

case "$1" in
  start)
      [ -d $HDD_VARLIBHC/ ] || mkdir $HDD_VARLIBHC/
      mount --bind $RAM_VARLIBHC/ $HDD_VARLIBHC/
      mount --make-private $HDD_VARLIBHC/
      wait_for $HDD_VARLIBHC
	if [ "$ZL2R" = true ]; then
		createZramLogDrive
		mount -t ext4 -o nosuid,noexec,nodev,user=varlibhc2ram /dev/zram${RAM_DEV} ${RAM_VARLIBHC}/
	else
		mount -t tmpfs -o nosuid,noexec,nodev,mode=0755,size=${SIZE} varlibhc2ram $RAM_VARLIBHC/
	fi
      wait_for $RAM_VARLIBHC
      syncFromDisk
      ;;

  stop)
      syncToDisk
	#ZRAM_LOG=$(awk '$2 == "/var/log" {print $1}' /proc/mounts)
	#ZRAM_LOG=$(echo ${ZRAM_LOG} | grep -o -E '[0-9]+')
      umount -l $RAM_VARLIBHC/
      umount -l $HDD_VARLIBHC/
	# Unsure as even with Root permision denied
	#echo ${ZRAM_LOG} > /sys/class/zram-control/hot_remove
      ;;

  write)
      syncToDisk
      ;;

  *)
      echo "Usage: varlibhc2ram {start|stop|write}" >&2
      exit 1
      ;;
esac
